@model DoAnKiemDinhPhanMem.Models.Accounts

@{ ViewBag.Title = "Create";
    Layout = null; }
<link href="//maxcdn.bootstrapcdn.com/bootstrap/4.1.1/css/bootstrap.min.css" rel="stylesheet" id="bootstrap-css">
<script src="//maxcdn.bootstrapcdn.com/bootstrap/4.1.1/js/bootstrap.min.js"></script>
<script src="//cdnjs.cloudflare.com/ajax/libs/jquery/3.2.1/jquery.min.js"></script>
<!------ Include the above in your HEAD tag ---------->

<!DOCTYPE html>
<html>
<head>
    <title>Login Page</title>
    <!--Made with love by Mutiullah Samim -->
    <!--Bootsrap 4 CDN-->
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/css/bootstrap.min.css" integrity="sha384-MCw98/SFnGE8fJT3GXwEOngsV7Zt27NXFoaoApmYm81iuXoPkFOJwJ8ERdknLPMO" crossorigin="anonymous">
    <link href="~/assets/img/iconCua24.jpg" rel="icon">
    <!--Fontawesome CDN-->
    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.3.1/css/all.css" integrity="sha384-mzrmE5qonljUremFsqc01SB46JvROS7bZs3IO2EmfFsd15uHvIt+Y8vEf7N7fWAU" crossorigin="anonymous">

    <!--Custom styles-->
    @*<link rel="stylesheet" type="text/css" href="styles.css">*@
    <style>
        /* Made with love by Mutiullah Samim*/


        html, body {
            background-image: url('../../assets/img/iconCua24.jpg');
            background-size: cover;
            background-repeat: no-repeat;
            height: 100%;
            font-family: 'Numans', sans-serif;
        }

        .container {
            height: 100%;
            align-content: center;
        }

        .card {
            height: 400px;
            margin-top: auto;
            margin-bottom: auto;
            width: 450px;
            background-color: rgba(0,0,0,0.4) !important;
        }

        .social_icon span {
            font-size: 60px;
            margin-left: 10px;
            color: #FFC312;
        }

            .social_icon span:hover {
                color: white;
                cursor: pointer;
            }

        .card-header h3 {
            color: white;
        }

        .social_icon {
            position: absolute;
            right: 20px;
            top: -45px;
        }

        .input-group-prepend span {
            width: 50px;
            background-color: #FFC312;
            color: black;
            border: 0 !important;
        }

        input:focus {
            outline: 0 0 0 0 !important;
            box-shadow: 0 0 0 0 !important;
        }

        .remember {
            color: white;
        }

            .remember input {
                width: 20px;
                height: 20px;
                margin-left: 15px;
                margin-right: 5px;
            }

        .login_btn {
            color: black;
            background-color: #FFC312;
            width: 100px;
        }

            .login_btn:hover {
                color: black;
                background-color: white;
            }

        .links {
            color: white;
        }

            .links a {
                margin-left: 4px;
            }
    </style>
    <link href="~/assets/vendor/bootstrap-icons/bootstrap-icons.css" rel="stylesheet">
</head>
<body>

    <div class="form-horizontal">
        <div class="form-login">
            <div class="container">
                <div class="d-flex justify-content-center h-100">
                    <div class="card">
                        <div class="card-header">
                            <h3 style="text-align:center">Sign Up</h3>
                            <div class="d-flex justify-content-end social_icon">
                            </div>
                            <div class="card-body">
                                <div class="input-group form-group">
                                    <div class="input-group-prepend">
                                        <span class="input-group-text"><i class="fas fa-user"></i></span>
                                    </div>
                                    @*<input type="text" name="Username" class="form-control" placeholder="username">*@
                                    @Html.EditorFor(model => model.Username, new { htmlAttributes = new { @class = "form-control", @placeholder = "Username" } })
                                    @Html.ValidationMessageFor(model => model.Username, "", new { @class = "text-danger" })
                                </div>
                                <div class="input-group form-group">
                                    <div class="input-group-prepend">
                                        <span class="input-group-text"><i class="fas fa-key"></i></span>
                                    </div>
                                    @*<input type="password" name="Password" class="form-control" placeholder="password">*@
                                    @Html.EditorFor(model => model.Password, new { htmlAttributes = new { @class = "form-control", @type = "Password", @placeholder = "Password", @minlength = "5", @oninvalid = "setCustomValidity('Nhập ít nhất 5 ký tự ')", @onchange = "try{setCustomValidity('')}catch(e){}" } })
                                    @Html.ValidationMessageFor(model => model.Password, "", new { @class = "text-danger" })
                                </div>
                                <div class="input-group form-group">
                                    <div class="input-group-prepend">
                                        <span class="input-group-text"><i class="fas fa-user"></i></span>
                                    </div>
                                    @*<input type="password" name="Password" class="form-control" placeholder="password">*@
                                    @Html.EditorFor(model => model.Fullname, new { htmlAttributes = new { @class = "form-control", @placeholder = "Fullname" } })
                                    @Html.ValidationMessageFor(model => model.Fullname, "", new { @class = "text-danger" })
                                </div>
                                <div class="input-group form-group">
                                    <div class="input-group-prepend">
                                        <span class="input-group-text"><i class="bi bi-envelope"></i></span>
                                    </div>
                                    @*<input type="password" name="Password" class="form-control" placeholder="password">*@
                                    @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control", @type = "email", @placeholder = "Email", @oninvalid = "setCustomValidity('Nhập đúng định dạng mail')", @onchange = "try{setCustomValidity('')}catch(e){}" } })
                                    @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
                                    <div class="valid-feedback">Valid.</div>
                                    <div class="invalid-feedback">Please fill out this field.</div>
                                </div>
                                <div class="input-group form-group">
                                    <div class="input-group-prepend">
                                        <span class="input-group-text"><i class="bi bi-phone "></i></span>
                                    </div>
                                    @*<input type="password" name="Password" class="form-control" placeholder="password">*@
                                    @Html.EditorFor(model => model.Phone, new { htmlAttributes = new { @class = "form-control", @placeholder = "Phone", @minlength = "10", @oninvalid = "setCustomValidity('Nhập ít nhất 10 ký tự ')", @onchange = "try{setCustomValidity('')}catch(e){}" } })
                                    @Html.ValidationMessageFor(model => model.Phone, "", new { @class = "text-danger" })
                                </div>
                                <div class="input-group form-group">
                                    <div class="input-group-prepend">
                                        <span class="input-group-text"><i class="bi bi-geo-alt"></i></span>
                                    </div>
                                    @*<input type="password" name="Password" class="form-control" placeholder="password">*@
                                    @Html.EditorFor(model => model.Address, new { htmlAttributes = new { @class = "form-control", @placeholder = "Address" } })
                                    @Html.ValidationMessageFor(model => model.Address, "", new { @class = "text-danger" })
                                </div>
                                <div style="width:auto;height:auto">
                                    <div class="col-md-offset-2">
                                        <br />
                                        <input id="submit" type="submit" style="border: 2px solid #fff; border-radius: 10px;margin-left:100px " value="Create Accounts" class="btn btn-warning" />
                                        <br />
                                        <p style="margin-left: 40px ">If you have account, Please <a style="color:white" href="~/Accounts/Login1">Login Now</a></p>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

</body>
<link href="~/assets/css/iziToast.min.css" rel="stylesheet" />
<script src="~/assets/js/iziToast.min.js"></script>
<script>
    $(function () {

        function validatePhone(str) {
            return  /^(1\s|1|)?((\(\d{3}\))|\d{3})(\-|\s)?(\d{3})(\-|\s)?(\d{4})$/.test(str);
        }
        function validateEmail(emailAddress) {
            var sQtext = '[^\\x0d\\x22\\x5c\\x80-\\xff]';
            var sDtext = '[^\\x0d\\x5b-\\x5d\\x80-\\xff]';
            var sAtom = '[^\\x00-\\x20\\x22\\x28\\x29\\x2c\\x2e\\x3a-\\x3c\\x3e\\x40\\x5b-\\x5d\\x7f-\\xff]+';
            var sQuotedPair = '\\x5c[\\x00-\\x7f]';
            var sDomainLiteral = '\\x5b(' + sDtext + '|' + sQuotedPair + ')*\\x5d';
            var sQuotedString = '\\x22(' + sQtext + '|' + sQuotedPair + ')*\\x22';
            var sDomain_ref = sAtom;
            var sSubDomain = '(' + sDomain_ref + '|' + sDomainLiteral + ')';
            var sWord = '(' + sAtom + '|' + sQuotedString + ')';
            var sDomain = sSubDomain + '(\\x2e' + sSubDomain + ')*';
            var sLocalPart = sWord + '(\\x2e' + sWord + ')*';
            var sAddrSpec = sLocalPart + '\\x40' + sDomain; // complete RFC822 email address spec
            var sValidEmail = '^' + sAddrSpec + '$'; // as whole string
            var reValidEmail = new RegExp(sValidEmail);
            return reValidEmail.test(emailAddress);
        }
        function dangKy(accounts) {
            $.ajax({
                url: "/Accounts/XuLyDangKi",
                data: JSON.stringify({ accounts }),
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                type: "POST",
                success: function (data) {
                    if (data.status) {
                        window.location.href = data.url;
                    }
                    else {
                        iziToast.warning({
                            timeout: 1500,
                            title: 'Lỗi',
                            message: data.message,
                            position: 'topRight'
                        });
                    }
                },
                error: function (data) {
                    iziToast.warning({
                        timeout: 1500,
                        title: 'Lỗi',
                        message: 'Loi chua xac dinh',
                        position: 'topRight'
                    });
                }

            });
        }
        $('#submit').click(function () {
            let accounts = new Object();
            accounts.Username = $('#Username').val();
            accounts.Phone = $('#Phone').val();
            accounts.Fullname = $('#Fullname').val();
            accounts.Password = $('#Password').val();
            accounts.Address = $('#Address').val();
            accounts.Email = $('#Email').val();
            if (accounts.Username == '')
                iziToast.warning({
                    timeout: 1500,
                    title: 'Lỗi',
                    message: 'Tai khoan khong duoc de rong',
                    position: 'topRight'
                });
            else
                if (accounts.Password == '')
                    iziToast.warning({
                        timeout: 1500,
                        title: 'Lỗi',
                        message: 'Mat khau khong duoc de rong',
                        position: 'topRight'
                    });
                else
                    if (accounts.Fullname == '')
                        iziToast.warning({
                            timeout: 1500,
                            title: 'Lỗi',
                            message: 'Ho ten khong duoc de rong',
                            position: 'topRight'
                        });
                    else
                        if (accounts.Email == '')
                            iziToast.warning({
                                timeout: 1500,
                                title: 'Lỗi',
                                message: 'E-mail khong duoc de rong',
                                position: 'topRight'
                            });
                        else
                            if (!validateEmail(accounts.Email))
                                iziToast.warning({
                                    timeout: 1500,
                                    title: 'Lỗi',
                                    message: 'E-mail khong dung dinh dang',
                                    position: 'topRight'
                                });
                            else
                                if (accounts.Phone == '')
                                    iziToast.warning({
                                        timeout: 1500,
                                        title: 'Lỗi',
                                        message: 'So dien thoai khong duoc de rong',
                                        position: 'topRight'
                                    });
                                else

                                    if (!validatePhone(accounts.Phone))
                                        iziToast.warning({
                                            timeout: 1500,
                                            title: 'Lỗi',
                                            message: 'So dien thoai khong dung dinh dang',
                                            position: 'topRight'
                                        });
                                    else
                                    if (accounts.Address == '')
                                        iziToast.warning({
                                            timeout: 1500,
                                            title: 'Lỗi',
                                            message: 'Dia chi khong duoc de rong',
                                            position: 'topRight'
                                        });
                                    else
                                        dangKy(accounts);
        })
    });
</script>
</html>